// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, dbg, readability, regexHelper, url, util, _;

  cheerio = require("cheerio");

  _ = require("underscore");

  regexHelper = require("./regexHelper");

  url = require("url");

  util = require("./util");

  dbg = function() {};

  readability = (function() {
    function readability(options) {
      this.options = options;
      this.$ = cheerio.load(util.washHtml(this.options.content));
    }

    readability.prototype.grabArticle = function() {
      var node, _i, _len, _ref;
      this.removeUnlikelyNode();
      this.selectCandidates();
      this.selectTopCandidate();
      this.pullAllGoodNodes();
      this.articleContent = cheerio("<div></div>");
      _ref = this.goodNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        this.articleContent.append(node);
      }
      this.prepArticle();
      return {
        text: this.articleContent.text(),
        html: this.articleContent.html()
      };
    };


    /*
    		remove unlikely content node
    		@param {Object} htmlObj cheerio object
     */

    readability.prototype.removeUnlikelyNode = function() {
      var allElements;
      allElements = this.$("*");
      return allElements.each(function(i, elem) {
        var continueFlag, newNode, node, tagName, unlikelyMatchString, _ref, _ref1;
        node = cheerio(this);
        unlikelyMatchString = (((_ref = elem.attribs) != null ? _ref["class"] : void 0) || "") + (((_ref1 = elem.attribs) != null ? _ref1.id : void 0) || "");
        tagName = elem.name;
        continueFlag = false;
        if (unlikelyMatchString && (tagName !== "body") && regexHelper.unlikelyCandidates(unlikelyMatchString) && (!regexHelper.okMaybeItsACandidate(unlikelyMatchString))) {
          node.remove();
          dbg("remove node:" + unlikelyMatchString);
          continueFlag = true;
        }
        if ((!continueFlag) && (tagName === "div")) {
          if (regexHelper.divToPElements(node.html())) {
            newNode = cheerio("<p></p>");
            newNode.html(node.html());
            return node.replaceWith(newNode);
          }
        }
      });
    };


    /*
    		select out candidates
    		@param {Object} htmlObj cheerio object
    		@return {Array} candidates array
     */

    readability.prototype.selectCandidates = function() {
      var candidates;
      candidates = [];
      this.$("p").each(function(i, elem) {
        var contentScore, grandParentNode, innerText, node, parentNode;
        node = cheerio(this);
        parentNode = elem.parent;
        if (!parentNode) {
          return;
        }
        if (_.isUndefined(parentNode.score)) {
          util.initializeNode(parentNode);
          candidates.push(parentNode);
        } else {
          dbg("parent score:" + parentNode.score);
        }
        grandParentNode = parentNode.parent;
        if (grandParentNode && _.isUndefined(grandParentNode.score)) {
          util.initializeNode(grandParentNode);
          candidates.push(grandParentNode);
        } else {
          if (!_.isUndefined(grandParentNode)) {
            dbg("grantParent score:" + grandParentNode.score);
          }
        }
        innerText = node.text();
        if (util.justWords(innerText)) {
          dbg("may be just words => " + innerText);
          return;
        }
        contentScore = util.contentScore(innerText);
        parentNode.score += contentScore;
        if (!_.isUndefined(grandParentNode)) {
          return grandParentNode.score += contentScore / 2;
        }
      });
      dbg("candidates count:" + candidates.length);
      return this.candidates = candidates;
    };


    /*
    		select out top candidates
    		@param {Array} candidates
    		@return {Object} top candidate
     */

    readability.prototype.selectTopCandidate = function() {
      var candidate, i, linkDensity, topCandidate, _i, _len, _ref;
      topCandidate = null;
      _ref = this.candidates;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        candidate = _ref[i];
        linkDensity = util.getLinkDensity(candidate);
        if (linkDensity > 0) {
          candidate.score = candidate.score * (1 - linkDensity);
        }
        if ((!topCandidate) || (candidate.score > topCandidate.score)) {
          dbg("find new better candidate");
          topCandidate = candidate;
        }
      }
      if (topCandidate === null || topCandidate.name === "body") {
        topCandidate = cheerio("<div></div>").html(cheerio(topCandidate).html())[0];
        util.initializeNode(topCandidate);
      }
      return this.topCandidate = topCandidate;
    };


    /*
    		pull out all good nodes according to top candidate
    		@param {Object} topCandidate
    		@return {Array} good nodes array
     */

    readability.prototype.pullAllGoodNodes = function() {
      var $sibling, append, contentBonus, goodNodes, innerText, linkDensity, sibling, siblingClassName, siblingNodes, siblingScoreThreshold, topCandidateClassName, _i, _len;
      goodNodes = [];
      siblingNodes = [];
      if (this.topCandidate.parent) {
        siblingNodes = this.topCandidate.parent.children;
      }
      if (siblingNodes.length > 0) {
        dbg("sibling count:" + siblingNodes.length);
        topCandidateClassName = this.topCandidate.attribs["class"];
        siblingScoreThreshold = Math.max(10, this.topCandidate.score * 0.2);
        for (_i = 0, _len = siblingNodes.length; _i < _len; _i++) {
          sibling = siblingNodes[_i];
          append = false;
          if (sibling === this.topCandidate) {
            append = true;
          } else {
            contentBonus = 0;
            if (topCandidateClassName && sibling.attribs && sibling.attribs["class"]) {
              siblingClassName = sibling.attribs["class"];
              if (topCandidateClassName && (topCandidateClassName === siblingClassName)) {
                contentBonus += this.topCandidate.score * 0.2;
              }
            }
            if ((!_.isUndefined(sibling.score)) && (sibling.score + contentBonus) >= siblingScoreThreshold) {
              append = true;
            }
            if (sibling.name === "p") {
              $sibling = $(sibling);
              innerText = $sibling.text();
              linkDensity = util.getLinkDensity($sibling);
              if (innerText.length > 80 && linkDensity < 0.25) {
                append = true;
              } else if (innerText.length <= 80 && linkDensity === 0 && (innerText.search(/\.( | $)/) !== -1)) {
                append = true;
              }
            }
          }
          if (append) {
            goodNodes.push(sibling);
          }
        }
      } else {
        goodNodes.push(this.topCandidate);
      }
      return this.goodNodes = goodNodes;
    };

    readability.prototype.prepArticle = function() {
      util.killBreaks(this.articleContent);
      util.clean(this.articleContent, "form");
      util.clean(this.articleContent, "object");
      util.clean(this.articleContent, "h1");
      util.clean(this.articleContent, "input");
      util.clean(this.articleContent, "textarea");
      util.clean(this.articleContent, "iframe");
      if (this.articleContent.find('h2').length === 1) {
        util.clean(this.articleContent, "h2");
      }
      util.cleanHeaders(this.articleContent);
      util.cleanConditionally(this.articleContent, "table");
      util.cleanConditionally(this.articleContent, "ul");
      util.cleanConditionally(this.articleContent, "div");
      util.removeExtraParagraph(this.articleContent);
      util.removeSingleHeader(this.articleContent);
      return util.trimAttributes(this.articleContent);
    };

    return readability;

  })();

  module.exports = readability;

}).call(this);

//# sourceMappingURL=index.map
