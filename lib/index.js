// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, readability, regexHelper, url, util, _;

  cheerio = require("cheerio");

  _ = require("underscore");

  regexHelper = require("./regexHelper");

  url = require("url");

  util = require("./util");

  readability = (function() {
    var _getSignature;

    function readability(options) {
      var defaultOptions, k;
      this.options = options;
      defaultOptions = {
        debug: false
      };
      for (k in defaultOptions) {
        if (_.isUndefined(this.options[k])) {
          this.options[k] = defaultOptions[k];
        }
      }
      this.$ = cheerio.load(util.washHtml(this.options.content));
    }

    readability.prototype.run = function() {
      var article, res, title;
      title = this.grabTitle();
      article = this.grabArticle();
      res = {
        title: title,
        text: article.text,
        html: article.html,
        url: this.options.url
      };
      return res;
    };

    readability.prototype.dbg = function() {
      if (this.options.debug) {
        return console.log.apply(this, arguments);
      }
    };

    readability.prototype.grabTitle = function() {
      var betterTitle, candidate, i, j, node, nodes, tag, titleClass, titleNode, titleNodes, _i, _j, _k, _l, _len, _len1, _len2, _node, _ref, _score, _text;
      this.titleCandidates = [];
      titleNodes = this.$("head title");
      if (titleNodes.length !== 1) {
        return "";
      }
      this.title = cheerio(titleNodes[0]).text().trim();
      for (i = _i = 1; _i <= 3; i = ++_i) {
        tag = "h" + i;
        nodes = this.$(tag);
        for (j = _j = 0, _len = nodes.length; _j < _len; j = ++_j) {
          node = nodes[j];
          _score = 7 - i - j;
          if (_score < 1) {
            _score = 1;
          }
          _node = cheerio(node);
          _text = _node.text().trim();
          if (regexHelper.likeTitle(_getSignature(node))) {
            _score += 6;
          }
          _score = _score * (1 + this.getTextInTitleWeight(_text));
          this.titleCandidates.push({
            text: _text,
            score: _score
          });
        }
      }
      titleClass = this.$(".title");
      for (_k = 0, _len1 = titleClass.length; _k < _len1; _k++) {
        titleNode = titleClass[_k];
        _text = cheerio(titleNode).text().trim();
        _score = 6;
        _score = _score * (1 + this.getTextInTitleWeight(_text));
        this.titleCandidates.push({
          text: _text,
          score: _score
        });
      }
      betterTitle = {
        score: 6,
        text: this.title
      };
      _ref = this.titleCandidates;
      for (_l = 0, _len2 = _ref.length; _l < _len2; _l++) {
        candidate = _ref[_l];
        if (candidate.score > betterTitle.score) {
          betterTitle = candidate;
        }
      }
      return betterTitle.text;
    };


    /*
           grab article content
     */

    readability.prototype.grabArticle = function() {
      var node, _i, _len, _ref;
      this.removeUnlikelyNode();
      this.selectCandidates();
      this.selectTopCandidate();
      this.pullAllGoodNodes();
      this.articleContent = cheerio("<div></div>");
      _ref = this.goodNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        this.articleContent.append(node);
      }
      this.prepArticle();
      return {
        text: this.articleContent.text(),
        html: this.articleContent.html()
      };
    };


    /*
           text is one of title pieces,may be a good title
           @param {String} text
           @return {Boolean}
     */

    readability.prototype.getTextInTitleWeight = function(text) {
      if (this.title.indexOf(text) !== -1) {
        return text.length / this.title.length;
      }
      return 0;
    };


    /*
           get node's signature:class name + id
           @param {Object} node
           @return {String} signature
     */

    _getSignature = function(node) {
      var _ref, _ref1;
      return (((_ref = node.attribs) != null ? _ref["class"] : void 0) || "") + (((_ref1 = node.attribs) != null ? _ref1.id : void 0) || "");
    };


    /*
    		remove unlikely content node
    		@param {Object} htmlObj cheerio object
     */

    readability.prototype.removeUnlikelyNode = function() {
      var allElements, continueFlag, elem, newNode, node, tagName, _i, _len, _results, _sign;
      allElements = this.$("*");
      _results = [];
      for (_i = 0, _len = allElements.length; _i < _len; _i++) {
        elem = allElements[_i];
        node = cheerio(elem);
        _sign = _getSignature(elem);
        tagName = elem.name;
        continueFlag = false;
        if (_sign && (tagName !== "body") && regexHelper.unlikelyCandidates(_sign) && (!regexHelper.okMaybeItsACandidate(_sign))) {
          node.remove();
          this.dbg("remove node:" + _sign);
          continueFlag = true;
        }
        if ((!continueFlag) && (tagName === "div")) {
          if (regexHelper.divToPElements(node.html())) {
            newNode = cheerio("<p></p>");
            newNode.html(node.html());
            _results.push(node.replaceWith(newNode));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };


    /*
    		select out candidates
    		@param {Object} htmlObj cheerio object
    		@return {Array} candidates array
     */

    readability.prototype.selectCandidates = function() {
      var allPElements, contentScore, elem, grandParentNode, innerText, node, parentNode, _i, _len;
      this.candidates = [];
      allPElements = this.$("p");
      for (_i = 0, _len = allPElements.length; _i < _len; _i++) {
        elem = allPElements[_i];
        node = cheerio(elem);
        parentNode = elem.parent;
        if (!parentNode) {
          continue;
        }
        if (_.isUndefined(parentNode.score)) {
          util.initializeNode(parentNode);
          this.candidates.push(parentNode);
        } else {
          this.dbg("parent score:" + parentNode.score);
        }
        grandParentNode = parentNode.parent;
        if (grandParentNode && _.isUndefined(grandParentNode.score)) {
          util.initializeNode(grandParentNode);
          this.candidates.push(grandParentNode);
        } else {
          if (!_.isUndefined(grandParentNode)) {
            this.dbg("grantParent score:" + grandParentNode.score);
          }
        }
        innerText = node.text();
        if (util.justWords(innerText)) {
          this.dbg("may be just words => " + innerText);
          continue;
        }
        contentScore = util.contentScore(innerText);
        parentNode.score += contentScore;
        if (!_.isUndefined(grandParentNode)) {
          grandParentNode.score += contentScore / 2;
        }
      }
      return this.dbg("candidates count:" + this.candidates.length);
    };


    /*
    		select out top candidates
    		@param {Array} candidates
    		@return {Object} top candidate
     */

    readability.prototype.selectTopCandidate = function() {
      var candidate, i, linkDensity, _i, _len, _ref;
      _ref = this.candidates;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        candidate = _ref[i];
        linkDensity = util.getLinkDensity(candidate);
        if (linkDensity > 0) {
          candidate.score = candidate.score * (1 - linkDensity);
        }
        if ((!this.topCandidate) || (candidate.score > this.topCandidate.score)) {
          this.dbg("find new better candidate");
          this.topCandidate = candidate;
        }
      }
      if (this.topCandidate === null || this.topCandidate.name === "body") {
        this.topCandidate = cheerio("<div></div>").html(cheerio(this.topCandidate).html())[0];
        return util.initializeNode(this.topCandidate);
      }
    };


    /*
    		pull out all good nodes according to top candidate
    		@param {Object} topCandidate
    		@return {Array} good nodes array
     */

    readability.prototype.pullAllGoodNodes = function() {
      var $sibling, append, contentBonus, innerText, linkDensity, sibling, siblingClassName, siblingNodes, siblingScoreThreshold, topCandidateClassName, _i, _len, _results;
      this.goodNodes = [];
      siblingNodes = [];
      if (this.topCandidate.parent) {
        siblingNodes = this.topCandidate.parent.children;
      }
      if (siblingNodes.length > 0) {
        this.dbg("sibling count:" + siblingNodes.length);
        topCandidateClassName = this.topCandidate.attribs["class"];
        siblingScoreThreshold = Math.max(10, this.topCandidate.score * 0.2);
        _results = [];
        for (_i = 0, _len = siblingNodes.length; _i < _len; _i++) {
          sibling = siblingNodes[_i];
          append = false;
          if (sibling === this.topCandidate) {
            append = true;
          } else {
            contentBonus = 0;
            if (topCandidateClassName && sibling.attribs && sibling.attribs["class"]) {
              siblingClassName = sibling.attribs["class"];
              if (topCandidateClassName && (topCandidateClassName === siblingClassName)) {
                contentBonus += this.topCandidate.score * 0.2;
              }
            }
            if ((!_.isUndefined(sibling.score)) && (sibling.score + contentBonus) >= siblingScoreThreshold) {
              append = true;
            }
            if (sibling.name === "p") {
              $sibling = cheerio(sibling);
              innerText = $sibling.text();
              linkDensity = util.getLinkDensity($sibling);
              if (innerText.length > 80 && linkDensity < 0.25) {
                append = true;
              } else if (innerText.length <= 80 && linkDensity === 0 && (innerText.search(/\.( | $)/) !== -1)) {
                append = true;
              }
            }
          }
          if (append) {
            _results.push(this.goodNodes.push(sibling));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        return this.goodNodes.push(this.topCandidate);
      }
    };


    /*
    		prepare article,clean html
     */

    readability.prototype.prepArticle = function() {
      util.killBreaks(this.articleContent);
      util.clean(this.articleContent, "form");
      util.clean(this.articleContent, "object");
      util.clean(this.articleContent, "h1");
      util.clean(this.articleContent, "input");
      util.clean(this.articleContent, "textarea");
      util.clean(this.articleContent, "iframe");
      if (this.articleContent.find('h2').length === 1) {
        util.clean(this.articleContent, "h2");
      }
      util.cleanHeaders(this.articleContent);
      util.cleanConditionally(this.articleContent, "table");
      util.cleanConditionally(this.articleContent, "ul");
      util.cleanConditionally(this.articleContent, "div");
      util.removeExtraParagraph(this.articleContent);
      util.removeSingleHeader(this.articleContent);
      return util.trimAttributes(this.articleContent);
    };

    return readability;

  })();

  module.exports = readability;

}).call(this);

//# sourceMappingURL=index.map
